name: assignment3

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create log file
        run: |
          start_time=$(date -Iminutes)
          echo "$start_time" > log.txt
          echo "barv" >> log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./books-service
          file: ./books-service/Dockerfile
          push: false
          tags: books-service:latest
          outputs: type=docker,dest=/tmp/books-service.tar
      
      - name: Log image build result if failed
        if: failure()
        run: echo "image not able to be built" >> log.txt

      - name: Log image build result if success
        if: success()
        run: echo "image successfully built" >> log.txt

      - name: Upload Docker image as artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: books-service
          path: /tmp/books-service.tar

      - name: Upload build log
        if: always()    
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          
  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/books-service.tar

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests pymongo
      
      - name: Start services 
        run: |
          docker compose -f books-service/docker-compose.yml up -d && echo "Container up and running" >> log.txt || (echo "Container failed to run" >> log.txt && exit 1)

      - name: List running containers
        run: docker ps

      - name: Run tests
        env:
          MONGO_URL: mongodb://mongo:27017/books
        run: pytest -v books-service/tests/assn3_tests.py | tee assn3_test_results.txt
        continue-on-error: true

      - name: Log test results
        run: |
          if grep -q "FAILED" assn3_test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload test results
        if: always()    
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Upload updated build log
        if: always()    
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          overwrite: true

  query:
    needs: test
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/books-service.tar

      - name: Start services
        run: docker compose -f books-service/docker-compose.yml up -d

      - name: Wait for Flask service to be ready
        run: |
          echo "Waiting for Flask service to be ready..."
          while ! curl -s http://localhost:5001/books; do
            sleep 5
            echo "Waiting for Flask service..."
          done
          echo "Flask service is ready!"

      - name: Execute queries
        run: |
          while IFS= read -r query; do
            echo "Processing query: $query"
            response=$(curl -s -X GET "http://localhost:5001/books$query")
            echo "query: $query" >> response.txt
            echo "response: $response" >> response.txt
          done < books-service/query.txt

      - name: Upload query results
        uses: actions/upload-artifact@v4
        with:
          name: query-results
          path: response.txt
