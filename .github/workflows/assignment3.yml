name: Assignment 3

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and update log file
        run: |
          start_time=$(date -Iminutes)
          echo "$start_time" > log.txt
          echo "Bar Volovski, Omer Bar-Yehuda" >> log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./books-service
          file: ./books-service/Dockerfile
          push: false
          tags: books-service:latest
          outputs: type=docker,dest=/tmp/books-service.tar

      - name: Update log with build result
        run: |
          if [ "${{ steps.docker_build.outcome }}" == "success" ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
          fi

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: books-service
          path: /tmp/books-service.tar

      - name: Upload log file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: log
          path: log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log
          path: .

      - name: Downloading books-service artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/books-service.tar

      - name: Set up Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
      
      - name: Run tests
        run: |
          pytest -v books-service/tests/assn3_tests.py > assn3_test_results.txt || echo "tests failed" >> log.txt

      - name: Upload test results and log file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Upload updated log file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: log
          path: log.txt
          overwrite: true

      - name: Stop Docker Compose
        run: docker compose down

  query:
    needs: test
    if: success()  # This ensures that the query job only runs if the test job succeeds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Downloading Books Service image artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/books-service.tar

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.yml up -d

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r books-service/requirements.txt

      - name: Checking that the containers are up
        run: docker ps

      - name: Posting books 
        run: |
          curl -X POST 'http://127.0.0.1:5001/books' -H "Content-Type: application/json" -d '{"title": "Adventures of Huckleberry Finn", "ISBN": "9780520343641", "genre": "Fiction"}'
          curl -X POST 'http://127.0.0.1:5001/books' -H "Content-Type: application/json" -d '{"title": "The Best of Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}'
          curl -X POST 'http://127.0.0.1:5001/books' -H "Content-Type: application/json" -d '{"title": "Fear No Evil", "ISBN": "9780394558783", "genre": "Biography"}'
          curl -X POST 'http://127.0.0.1:5001/books' -H "Content-Type: application/json" -d '{"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"}'
          curl -X POST 'http://127.0.0.1:5001/books' -H "Content-Type: application/json" -d '{"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"}'
          curl -X POST 'http://127.0.0.1:5001/books' -H "Content-Type: application/json" -d '{"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}'

      - name: Execute queries and generate response.txt
        run: |
          echo "Initializing response.txt"
          echo "" > response.txt
          if [ ! -f "query.txt" ]; then
            echo "query.txt not found in current directory. Searching in parent directory..."
            if [ -f "../query.txt" ]; then
              echo "query.txt found in parent directory. Using it."
              QUERY_FILE="../query.txt"
            else
              echo "query.txt not found in parent directory either. Creating a dummy query.txt for testing."
              echo "?genre=Fiction" > query.txt
              QUERY_FILE="query.txt"
            fi
          else
            QUERY_FILE="query.txt"
          fi
          echo "Using query file: $QUERY_FILE"
          while IFS= read -r query || [ -n "$query" ]; do
            echo "Processing query: $query"
            echo "query: $query" >> response.txt
            response=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:5001/books$query")
            if [ "$response" -eq 200 ]; then
              result=$(curl -s "http://127.0.0.1:5001/books$query")
              echo "response: $result" >> response.txt
            else
              echo "response: error $response" >> response.txt
            fi
          done < "$QUERY_FILE"
          echo "Contents of response.txt:"
          cat response.txt

      - name: Upload response.txt file
        uses: actions/upload-artifact@v4
        with:
          name: queries-response
          path: response.txt

      - name: Stop Docker Compose
        run: docker compose down
