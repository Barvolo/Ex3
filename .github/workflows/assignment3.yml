name: Assignment 3

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and update log file
        run: |
          start_time=$(date -Iminutes)
          echo "$start_time" > log.txt
          echo "Bar Volovski, Omer Bar-Yehuda" >> log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: docker_build
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./books-service
          file: ./books-service/Dockerfile
          push: false
          tags: books-service:latest
          outputs: type=docker,dest=/tmp/books-service.tar

      - name: Update log with build result
        run: |
          if [ "${{ steps.docker_build.outcome }}" == "success" ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
          fi

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        if: steps.docker_build.outcome == 'success'
        with:
          name: books-service
          path: /tmp/books-service.tar

      - name: Upload log file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: log-file
          path: log.txt

      - name: Fail the job if Docker build failed
        if: steps.docker_build.outcome != 'success'
        run: exit 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log-file
          path: .

      - name: Downloading books-service artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/books-service.tar

      - name: Set up Docker Compose
        run: |
          if docker compose -f docker-compose.yml up -d; then
            echo "Container up and running" >> log-file/log.txt
          else
            echo "Container failed to run" >> log-file/log.txt
            exit 1  # Exit if Docker Compose fails to start the containers
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
      
      - name: Run tests
        id: run_tests
        run: |
          pytest -v books-service/tests/assn3_tests.py > assn3_test_results.txt
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Log test results and update log file
        run: |
          if grep -q "FAILED" assn3_test_results.txt; then
            echo "tests failed" >> log-file/log.txt
            exit 1  # Fail the job if any tests failed
          else
            echo "tests succeeded" >> log-file/log.txt
          fi

      - name: Upload updated log file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: log-file
          path: log-file/log.txt
          overwrite: true

      - name: Stop Docker Compose
        if: always()
        run: docker compose down

  query:
    needs: test
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Compose
        run: docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Add books to the database
        run: |
          echo "Adding books to the database:"
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "Adventures of Huckleberry Finn", "ISBN": "9780520343641", "genre": "Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "The Best of Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "Fear No Evil", "ISBN": "9780394558783", "genre": "Biography"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"}'
          curl -X POST http://localhost:5001/books -H "Content-Type: application/json" -d '{"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}'
          
          echo "Waiting for database to update..."
          sleep 5

      - name: Run Queries
        run: |
          touch response.txt
          if [ -f "books-service/query.txt" ]; then
            echo "Query file found, processing..."
            while IFS= read -r query || [ -n "$query" ]; do
              echo "Processing query: $query"
              echo "query: ${query}" >> response.txt
              RESPONSE=$(curl -s -X GET "http://localhost:5001/books${query}" -H "Content-Type: application/json")
              echo "response: ${RESPONSE}" >> response.txt
            done < books-service/query.txt
          else
            echo "query.txt not found, skipping query execution." >> response.txt
          fi
          echo "Contents of response.txt:"
          cat response.txt

      - name: Upload response file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: response-file
          path: response.txt

      - name: Stop Docker Compose
        if: always()
        run: docker compose down